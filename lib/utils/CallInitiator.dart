import 'package:flutter/material.dart';
import 'package:trackmentalhealth/utils/CallSignalManager.dart';
import 'package:trackmentalhealth/utils/showToast.dart';
import 'StompService.dart';

class CallInitiator {
  static const Duration _callTimeout = Duration(seconds: 30);
  
  /// Kh·ªüi t·∫°o cu·ªôc g·ªçi video
  static Future<void> initiateCall({
    required String sessionId,
    required String callerId,
    required String callerName,
    required String calleeId,
    required String calleeName,
    required StompService stompService,
    required BuildContext context,
  }) async {
    print("üìû [CallInitiator] B·∫Øt ƒë·∫ßu cu·ªôc g·ªçi t·ª´ $callerName ƒë·∫øn $calleeName");
    
    try {
      // G·ª≠i signal y√™u c·∫ßu g·ªçi
      CallSignalManager.sendSignalWithRetry(
        stompService: stompService,
        sessionId: int.parse(sessionId),
        signal: {
          "type": "CALL_REQUEST",
          "callerId": callerId,
          "calleeId": calleeId,
          "callerName": callerName,
          "calleeName": calleeName,
          "sessionId": sessionId,
          "timestamp": DateTime.now().millisecondsSinceEpoch,
        },
      );
      
      // Hi·ªÉn th·ªã dialog ƒëang g·ªçi
      _showCallingDialog(
        context: context,
        calleeName: calleeName,
        onCancel: () => _cancelCall(sessionId, callerId, calleeId, stompService, context),
      );
      
      // Set timeout cho cu·ªôc g·ªçi
      _setCallTimeout(sessionId, callerId, calleeId, stompService, context);
      
    } catch (e) {
      print("‚ùå [CallInitiator] L·ªói khi kh·ªüi t·∫°o cu·ªôc g·ªçi: $e");
      showToast("‚ùå Kh√¥ng th·ªÉ kh·ªüi t·∫°o cu·ªôc g·ªçi", 'error');
    }
  }
  
  /// Hi·ªÉn th·ªã dialog ƒëang g·ªçi
  static void _showCallingDialog({
    required BuildContext context,
    required String calleeName,
    required VoidCallback onCancel,
  }) {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (_) => AlertDialog(
        title: Row(
          children: [
            SizedBox(
              width: 20,
              height: 20,
              child: CircularProgressIndicator(
                strokeWidth: 2,
                valueColor: AlwaysStoppedAnimation<Color>(Colors.blue),
              ),
            ),
            SizedBox(width: 12),
            Expanded(
              child: Text("ƒêang g·ªçi $calleeName..."),
            ),
          ],
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text("Vui l√≤ng ch·ªù ng∆∞·ªùi nh·∫≠n tr·∫£ l·ªùi"),
            SizedBox(height: 16),
            Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                ElevatedButton.icon(
                  onPressed: onCancel,
                  icon: Icon(Icons.call_end, color: Colors.white),
                  label: Text("H·ªßy"),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.red,
                    foregroundColor: Colors.white,
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
  
  /// H·ªßy cu·ªôc g·ªçi
  static void _cancelCall(
    String sessionId,
    String callerId,
    String calleeId,
    StompService stompService,
    BuildContext context,
  ) {
    print("üìµ [CallInitiator] H·ªßy cu·ªôc g·ªçi");
    
    // G·ª≠i signal h·ªßy cu·ªôc g·ªçi
    CallSignalManager.sendSignalWithRetry(
      stompService: stompService,
      sessionId: int.parse(sessionId),
      signal: {
        "type": "CALL_ENDED",
        "callerId": callerId,
        "calleeId": calleeId,
        "sessionId": sessionId,
        "reason": "CANCELLED",
        "timestamp": DateTime.now().millisecondsSinceEpoch,
      },
    );
    
    Navigator.pop(context);
    showToast("üìµ ƒê√£ h·ªßy cu·ªôc g·ªçi", 'info');
  }
  
  /// Set timeout cho cu·ªôc g·ªçi
  static void _setCallTimeout(
    String sessionId,
    String callerId,
    String calleeId,
    StompService stompService,
    BuildContext context,
  ) {
    Future.delayed(_callTimeout, () {
      if (context.mounted) {
        // Ki·ªÉm tra xem dialog ƒëang g·ªçi c√≤n hi·ªÉn th·ªã kh√¥ng
        if (Navigator.canPop(context)) {
          print("‚è∞ [CallInitiator] Cu·ªôc g·ªçi timeout");
          
          // G·ª≠i signal timeout
          CallSignalManager.sendSignalWithRetry(
            stompService: stompService,
            sessionId: int.parse(sessionId),
            signal: {
              "type": "CALL_TIMEOUT",
              "callerId": callerId,
              "calleeId": calleeId,
              "sessionId": sessionId,
              "timestamp": DateTime.now().millisecondsSinceEpoch,
            },
          );
          
          Navigator.pop(context);
          showToast("‚è∞ Cu·ªôc g·ªçi kh√¥ng ƒë∆∞·ª£c tr·∫£ l·ªùi", 'warning');
        }
      }
    });
  }
  
  /// K·∫øt th√∫c cu·ªôc g·ªçi
  static void endCall({
    required String sessionId,
    required String callerId,
    required String calleeId,
    required StompService stompService,
    required BuildContext context,
  }) {
    print("üìµ [CallInitiator] K·∫øt th√∫c cu·ªôc g·ªçi");
    
    // G·ª≠i signal k·∫øt th√∫c cu·ªôc g·ªçi
    CallSignalManager.sendSignalWithRetry(
      stompService: stompService,
      sessionId: int.parse(sessionId),
      signal: {
        "type": "CALL_ENDED",
        "callerId": callerId,
        "calleeId": calleeId,
        "sessionId": sessionId,
        "reason": "ENDED",
        "timestamp": DateTime.now().millisecondsSinceEpoch,
      },
    );
    
    Navigator.pop(context);
  }
  
  /// Ki·ªÉm tra tr·∫°ng th√°i cu·ªôc g·ªçi
  static bool isCallInProgress(BuildContext context) {
    return Navigator.canPop(context);
  }
}
