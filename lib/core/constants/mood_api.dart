import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';

const String baseUrl = "http://192.168.3.7:9999/api";

// üõ°Ô∏è H√†m l·∫•y header c√≥ token th·ª±c t·ª´ SharedPreferences
Future<Map<String, String>> getHeaders() async {
  const fakeToken = "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhbmhAZXhhbXBsZS5jb20iLCJ1c2VySWQiOjksInJvbGUiOiJVU0VSIiwicm9sZXMiOlsiUk9MRV9VU0VSIl0sImlhdCI6MTc1NDAyNTU3OCwiZXhwIjoxNzU0MDYxNTc4fQ.vDSuPi0aCSVuJeI49am0K0k515bNP-YDfOsbbUFQsXs"; // <-- D√°n token th·∫≠t c·ªßa b·∫°n ·ªü ƒë√¢y

  return {
    "Content-Type": "application/json",
    "Authorization": "Bearer $fakeToken",
  };
}


// üß† L·∫•y danh s√°ch m·ª©c c·∫£m x√∫c
Future<List<dynamic>> getMoodLevels() async {
  final headers = await getHeaders();
  final response = await http.get(Uri.parse("$baseUrl/mood-levels"), headers: headers);

  if (response.statusCode == 200) {
    return jsonDecode(response.body);
  } else {
    throw Exception("Kh√¥ng th·ªÉ l·∫•y danh s√°ch m·ª©c c·∫£m x√∫c");
  }
}

// üß† L·∫•y mood h√¥m nay c·ªßa ng∆∞·ªùi d√πng
Future<Map<String, dynamic>?> getTodayMood() async {
  final headers = await getHeaders();
  final response = await http.get(Uri.parse("$baseUrl/moods/my/today"), headers: headers);

  if (response.statusCode == 200) {
    if (response.body.isEmpty || response.body == "null") return null;
    return jsonDecode(response.body);
  } else {
    throw Exception("Kh√¥ng th·ªÉ l·∫•y mood h√¥m nay");
  }
}

// üß† T·∫°o mood m·ªõi
Future<Map<String, dynamic>> createMood(Map<String, dynamic> mood) async {
  final headers = await getHeaders();
  final response = await http.post(
    Uri.parse("$baseUrl/moods"),
    headers: headers,
    body: jsonEncode(mood),
  );

  if (response.statusCode == 200) {
    return jsonDecode(response.body);
  } else {
    // üîç IN RA L·ªñI CHI TI·∫æT
    print("üõë createMood L·ªñI: ${response.statusCode}");
    print("üõë BODY: ${response.body}");
    throw Exception("Kh√¥ng th·ªÉ t·∫°o mood m·ªõi");
  }
}


// üß† C·∫≠p nh·∫≠t mood
Future<Map<String, dynamic>> updateMood(int id, Map<String, dynamic> mood) async {
  final headers = await getHeaders();
  final response = await http.put(
    Uri.parse("$baseUrl/moods/$id"),
    headers: headers,
    body: jsonEncode(mood),
  );

  if (response.statusCode == 200) {
    return jsonDecode(response.body);
  } else {
    throw Exception("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t mood");
  }
}
