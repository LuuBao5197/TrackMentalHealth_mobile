import 'package:url_launcher/url_launcher.dart';

class GoogleMeetService {
  static Future<void> startVideoCall({
    required String meetingTitle,
    required String participantName,
  }) async {
    // T·∫°o Google Meet link v·ªõi title v√† participant name
    final meetingUrl = generateMeetUrl(meetingTitle, participantName);
    
    try {
      final Uri url = Uri.parse(meetingUrl);
      
      // Th·ª≠ m·ªü v·ªõi external browser tr∆∞·ªõc (ƒë·ªÉ tr√°nh m·ªü Gmail)
      try {
        await launchUrl(url, mode: LaunchMode.externalApplication);
        return;
      } catch (e) {
        print('External application failed: $e');
      }
      
      // Fallback: th·ª≠ v·ªõi platform default
      try {
        await launchUrl(url, mode: LaunchMode.platformDefault);
        return;
      } catch (e) {
        print('Platform default failed: $e');
      }
      
      // Fallback cu·ªëi: th·ª≠ v·ªõi external browser
      try {
        await launchUrl(url, mode: LaunchMode.externalApplication);
        return;
      } catch (e) {
        print('External browser failed: $e');
      }
      
      throw 'Could not launch Google Meet. Please install a web browser.';
    } catch (e) {
      throw 'Error launching Google Meet: $e';
    }
  }

  static String generateMeetUrl(String title, String participant) {
    // T·∫°o meeting ID ng·∫´u nhi√™n
    final meetingId = _generateMeetingId();
    
    // T·∫°o Google Meet URL ƒë∆°n gi·∫£n (kh√¥ng c√≥ query parameters ƒë·ªÉ tr√°nh l·ªói)
    return 'https://meet.google.com/$meetingId';
  }

  // Ph∆∞∆°ng th·ª©c t·∫°o URL cho WebView (ƒë∆°n gi·∫£n h∆°n)
  static String generateWebViewUrl(String title, String participant) {
    // S·ª≠ d·ª•ng meeting ID c·ªë ƒë·ªãnh ƒë·ªÉ test, ho·∫∑c t·∫°o m·ªõi
    final meetingId = _generateMeetingId();
    
    // URL ƒë∆°n gi·∫£n cho WebView
    return 'https://meet.google.com/$meetingId';
  }

  // Ph∆∞∆°ng th·ª©c m·ªü Google Meet v·ªõi URL scheme ch√≠nh x√°c
  static Future<void> openGoogleMeetDirectly({
    required String meetingTitle,
    required String participantName,
  }) async {
    final meetingId = _generateMeetingId();
    
    // T·∫°o URL Google Meet ch√≠nh x√°c
    final meetUrl = 'https://meet.google.com/$meetingId';
    
    try {
      final Uri url = Uri.parse(meetUrl);
      
      // Th·ª≠ m·ªü v·ªõi external browser
      await launchUrl(url, mode: LaunchMode.externalApplication);
    } catch (e) {
      print('Error opening Google Meet: $e');
      rethrow;
    }
  }

  // Ph∆∞∆°ng th·ª©c m·ªü Google Meet v·ªõi fallback
  static Future<void> openGoogleMeetWithFallback({
    required String meetingTitle,
    required String participantName,
  }) async {
    final meetingId = _generateMeetingId();
    final meetUrl = 'https://meet.google.com/$meetingId';
    final Uri url = Uri.parse(meetUrl);
    
    print('üîó Generated Google Meet URL: $meetUrl');
    print('üîó Parsed URI: $url');


    try {
      // Th·ª≠ m·ªü v·ªõi external browser
      print('üåê Attempting to open with external browser...');
      await launchUrl(url, mode: LaunchMode.externalApplication);
      print('‚úÖ Successfully opened with external browser');
    } catch (e) {
      print('‚ùå External browser failed: $e');
      
      // Fallback: th·ª≠ m·ªü v·ªõi platform default
      try {
        print('üåê Attempting to open with platform default...');
        await launchUrl(url, mode: LaunchMode.platformDefault);
        print('‚úÖ Successfully opened with platform default');
      } catch (e2) {
        print('‚ùå Platform default failed: $e2');
        throw 'Could not open Google Meet. Please check your browser settings.';
      }
    }
  }

  // Ph∆∞∆°ng th·ª©c m·ªü Google Meet th√¥ng minh (ki·ªÉm tra app c√≥ s·∫µn)
  static Future<void> openGoogleMeetSmart({
    required String meetingTitle,
    required String participantName,
  }) async {
    final meetingId = _generateMeetingId();
    final meetUrl = 'https://meet.google.com/$meetingId';
    
    print('üîó Generated Google Meet URL: $meetUrl');
    
    try {
      final Uri url = Uri.parse(meetUrl);
      
      // Ki·ªÉm tra xem c√≥ th·ªÉ m·ªü URL kh√¥ng
      if (await canLaunchUrl(url)) {
        print('‚úÖ URL can be launched');
        
        // Th·ª≠ m·ªü v·ªõi external browser
        try {
          await launchUrl(url, mode: LaunchMode.externalApplication);
          print('‚úÖ Successfully opened with external browser');
          return;
        } catch (e) {
          print('‚ùå External browser failed: $e');
        }
        
        // Fallback: th·ª≠ m·ªü v·ªõi platform default
        try {
          await launchUrl(url, mode: LaunchMode.platformDefault);
          print('‚úÖ Successfully opened with platform default');
          return;
        } catch (e) {
          print('‚ùå Platform default failed: $e');
        }
      } else {
        print('‚ùå URL cannot be launched');
        throw 'Cannot open Google Meet URL. Please check your device settings.';
      }
    } catch (e) {
      print('‚ùå Error opening Google Meet: $e');
      rethrow;
    }
  }

  static String _generateMeetingId() {
    // T·∫°o meeting ID ng·∫´u nhi√™n (10 k√Ω t·ª±)
    const chars = 'abcdefghijklmnopqrstuvwxyz';
    int random = DateTime.now().millisecondsSinceEpoch;
    String result = '';
    
    for (int i = 0; i < 10; i++) {
      result += chars[random % chars.length];
      random ~/= chars.length;
    }
    
    return result;
  }


  static Future<void> joinMeeting(String meetingId) async {
    final meetingUrl = 'https://meet.google.com/$meetingId';
    
    try {
      final Uri url = Uri.parse(meetingUrl);
      
      // Th·ª≠ m·ªü v·ªõi external application tr∆∞·ªõc
      try {
        await launchUrl(url, mode: LaunchMode.externalApplication);
        return;
      } catch (e) {
        print('External application failed: $e');
      }
      
      // Fallback: th·ª≠ v·ªõi platform default
      try {
        await launchUrl(url, mode: LaunchMode.platformDefault);
        return;
      } catch (e) {
        print('Platform default failed: $e');
      }
      
      // Fallback cu·ªëi: th·ª≠ v·ªõi external browser
      try {
        await launchUrl(url, mode: LaunchMode.externalNonBrowserApplication);
        return;
      } catch (e) {
        print('External non-browser failed: $e');
      }
      
      throw 'Could not launch Google Meet. Please install a web browser.';
    } catch (e) {
      throw 'Error joining Google Meet: $e';
    }
  }
}
